<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RapidMVC</name>
    </assembly>
    <members>
        <member name="T:cpGames.core.RapidMVC.IBinding">
            <summary>
                Binding is a map of views with properties matching a unique BindingKey.
                Binding handles updating values of mapped properties.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IBindingCollection">
            <summary>
                Collection of bindings. Typically you want one binding collection/context.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IBindingKeyFactoryCollection">
            <summary>
                Contains all binding key factories. Typically you want one of these (Rapid has one already).
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IBaseCommand">
            <summary>
                Commands are used to execute a single action.
                They need to be added to a signal.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IContext">
            <summary>
                Context encapsulates data for a collection of views registered under it.
                Registering view with context automatically binds injected properties.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IContextCollection">
            <summary>
                A collection of contexts
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IView">
            <summary>
                Views are registered with Contexts.
                You can either derive from default View or implement your own.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.InjectAttribute">
            <summary>
            Add this attribute to property you want to be injected.
            </summary>
        </member>
        <member name="P:cpGames.core.RapidMVC.InjectAttribute.Key">
            <summary>
            Optional key to locate the binding injecting this property.
            If key is missing, binding will be located by property type
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.ContextAttribute">
            <summary>
            Add this to your view to determine context to register a view with.
            If missing, view will register with Root context.
            </summary>
        </member>
        <member name="P:cpGames.core.RapidMVC.ContextAttribute.Name">
            <summary>
            Optional context name. Root context if missing.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IBindingKey">
            <summary>
            A unique binding key identifying a binding in a context.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.IBindingKeyFactory">
            <summary>
                Binding key factory allows creation of binding keys from any type of data. Feel free to add your own.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.BaseSignal">
            <summary>
                Signals are a way to execute commands.
                To use, connect your commands to a signal and the call signal.Dispatch(parameters) to execute connected commands.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.Signal">
            <summary>
                Signal with no parameters
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.Signal`1">
            <summary>
                Signal with one parameter
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.Signal`2">
            <summary>
                Signal with two parameters.
                If you want to have more, I recommend creating a model and using that as a parameter.
            </summary>
        </member>
        <member name="T:cpGames.core.RapidMVC.View">
            <summary>
                Default View
            </summary>
        </member>
        <member name="P:cpGames.core.RapidMVC.IViewCollection.Count">
            <summary>
            Number of views in the collection.
            </summary>
        </member>
        <member name="M:cpGames.core.RapidMVC.IViewCollection.RegisterView(cpGames.core.RapidMVC.IView,System.String@)">
            <summary>
            Register a unique view. Returns false if view instance is already registered.
            </summary>
            <param name="view">View instance to register.</param>
            <param name="errorMessage">If registration fails, this contains a reason why.</param>
            <returns>True if view registered, otherwise false. See <see cref="!:errorMessage" /> for details.</returns>
        </member>
    </members>
</doc>
